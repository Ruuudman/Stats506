################
#####Q3.(a)#####
################
library(data.table)
library(tidyverse)
###Making the Function
pvalue=function(X,beta,sigma,mc_rep){
n=nrow(X)
p=ncol(X)
p_val=matrix(rep(1,(p*mc_rep)),p,mc_rep)
for(i in 1:mc_rep){
Y=X%*%beta+rnorm(n,0,sigma)
QR=qr(t(X)%*%X)
beta_hat= solve(qr.R(QR), t(qr.Q(QR)) %*% t(X) %*% Y)
Y_hat=X%*%beta_hat
sigma_hat=sum((Y-Y_hat)^2)/(n-p)
v=sigma_hat*diag(solve(t(X)%*%X))
#*chol2inv(t(X)%*%X)
z=beta_hat/sqrt(v)
p_val[,i]=2*(1-pnorm(abs(z)))
}
print(p_val)
}

##Setting input values and a seed number

set.seed(0352)
n=1000
p=100
X=rnorm(n*p,0,1)
dim(X)=c(n,p)
mc_rep=1
beta1=matrix(rep(1,10),10,1)
beta2=matrix(rep(0,90),90,1)
beta=rbind(beta1,beta2)
sigma=1


Y=X%*%beta+rnorm(n,0,sigma)
result=lm(Y~0+X)
beta_lm=summary(result)$coefficients[,1]
p_lm=summary(result)$coefficients[,4]

QR=qr(t(X)%*%X)
beta_hat= solve(qr.R(QR), t(qr.Q(QR)) %*% t(X) %*% Y)
beta_diff=abs(beta_hat-beta_lm)

p_function=pvalue(X,beta,sigma,mc_rep)
p_diff=abs(p_function-p_lm)
beta_diff
p_diff

################
#####Q2.(b)#####
################

sigma_mat=diag(1,p,p)
R = chol(sigma_mat)
M = rnorm(n*p)
dim(M) = c(n, p)
X = M %*% R
X

set.seed(0352)
resultb=pvalue(X,beta,sigma,mc_rep)

################
#####Q2.(c)#####
################

evaluate=function(result,mc_rep){
TP=rep(1,mc_rep)
FP=rep(1,mc_rep)
TN=rep(1,mc_rep)
FN=rep(1,mc_rep)
sensitivity=rep(1,mc_rep)
specificity=rep(1,mc_rep)
FWER=rep(1,mc_rep)
FDR=rep(1,mc_rep)

for(i in 1:mc_rep){
r=ifelse(result[,i]<0.05,1,0)
rr=cbind(beta,r)
TP[i]=sum(rr[,1]==1&rr[,2]==1)#TP
FN[i]=sum(rr[,1]==1&rr[,2]==0)#FN
TN[i]=sum(rr[,1]==0&rr[,2]==0)#TN
FP[i]=sum(rr[,1]==0&rr[,2]==1)#FP
sensitivity[i]=TP[i]/(TP[i]+FN[i])
specificity[i]=TN[i]/(TN[i]+FP[i])
FDR[i]=FP[i]/(TP[i]+FP[i])
FWER[i]=ifelse(FP[i]>0,1,0)
}

sensitivity=mean(sensitivity)
specificity=mean(specificity)
FDR=mean(FDR)
FWER=sum(FWER)/mc_rep
print(c(sensitivity,specificity,FDR,FWER))
}

set.seed(0352)
mc_rep=100
result=pvalue(X,beta,sigma,mc_rep)
resultc=evaluate(result,mc_rep)

################
#####Q2.(d)#####
################

bonferroni=p.adjust(result,"bonferroni")
holm=p.adjust(result,"holm")
BH=p.adjust(result,"BH")
BY=p.adjust(result,"BY")
dim(bonferroni)=dim(result)
dim(holm)=dim(result)
dim(BH)=dim(result)
dim(BY)=dim(result)


bonf_p=evaluate(bonferroni,mc_rep)
holm_p=evaluate(holm,mc_rep)
bh_p=evaluate(BH,mc_rep)
by_p=evaluate(BY,mc_rep)


################
#####Q2.(e)#####
################
result_e=matrix(c(resultc,bonf_p,holm_p,bh_p,by_p),4,5)
rownames(result_e)=c("Sensitivity","Specificity","FDR","FWER")
colnames(result_e)=c("NonCorrected","Bonferonni","Holm","BH","BY")
result_e=as.data.frame(result_e)
class(result_e)
Values=rownames(result_e)
result_e=cbind(Values,result_e)
#result_e%>%mutate(NonCorrected=format(NonCorrected,big.mark=','))%>%
#knitr::kable(align = 'r' )
#,Bonferroni=format(Bonferroni,big.mark=','),Holm=format(Holm,big.mark=','),
#BH=format(BH,big.mark=','),BY=format(BY,big.mark=','))%>%
#knitr::kable(align = 'r' )
